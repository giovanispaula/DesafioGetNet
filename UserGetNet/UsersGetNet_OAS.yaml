---
swagger: "2.0"
info:
  description: "Desafio técnico para processo seletivo da GetNet\nCriação de uma nova Api, considerando criação, alteração e consulta de usuários. \n\nRequisições: \n- Criação de Usuário  Input: nome, password e email   \n- Consulta de Usuário  \n    Input: identificador único \n    Output: nome, password e email  \n    \n- Listagem de Usuários  \n    Output: nome, password e email   \n    \n- Alteração de Usuário  \n    Input: nome, password e email\n    Output: nome, password e email\n"
  version: 1.0.0
  title: Api Users GetNet
  contact:
    name: Giovani Silva
    url: http://Github.com/giovanispaula
    email: giovannispaula@gmail.com
host: virtserver.swaggerhub.com
basePath: /giovanispaula/abc/1.0.0
tags:
- name: Usuários Getnet
  description: User Controller
schemes:
- https
paths:
  /users:
    get:
      tags:
      - Usuários Getnet
      summary: Lista de Usuários
      operationId: findAllUsersUsingGET
      produces:
      - '*/*'
      parameters: []
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    post:
      tags:
      - Usuários Getnet
      summary: Cadastro de novos usuários
      operationId: saveUserUsingPOST
      consumes:
      - application/json
      produces:
      - '*/*'
      parameters:
      - in: body
        name: user
        description: Cadastro
        required: true
        schema:
          $ref: '#/definitions/Users'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Users'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
  /users/filter/{name}:
    get:
      tags:
      - Usuários Getnet
      summary: Buscar usuário por nome
      operationId: findUserByNameUsingGET
      produces:
      - '*/*'
      parameters:
      - name: name
        in: path
        description: Digitar nome ou parte do nome
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
  /users/{id}:
    get:
      tags:
      - Usuários Getnet
      summary: Buscar usuário por Id
      operationId: findUserByIdUsingGET
      produces:
      - '*/*'
      parameters:
      - name: id
        in: path
        description: Digitar número do Id do usuário a ser buscado
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Users'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    put:
      tags:
      - Usuários Getnet
      summary: Atualizar dados de usuário
      operationId: updateUserUsingPUT
      consumes:
      - application/json
      produces:
      - '*/*'
      parameters:
      - name: id
        in: path
        description: Digitar id do usuário a ser alterado
        required: true
        type: integer
        format: int64
      - in: body
        name: newUser
        description: newUser
        required: true
        schema:
          $ref: '#/definitions/Users'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Users'
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
definitions:
  Users:
    type: object
    required:
    - email
    - name
    properties:
      email:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      password:
        type: string
        pattern: ^(?=.*[0-9])(?!.*(.)\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%¨&*()_+])(?=\S+$).{9,}$
    title: Users
